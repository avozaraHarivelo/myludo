security:
    enable_authenticator_manager: true
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
        App\Entity\User:
            algorithm: auto
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
     # used to reload user from session & other features (e.g. switch_user)
        app_user_provider:
            entity:
                class: App\Entity\User
                # property: email
        jwt_user_provider:
            entity:
                class: App\Entity\User
                property: id
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        
        api_token_refresh:
            provider: jwt_user_provider
            pattern: ^/api/token/refresh
            stateless: true
            refresh_jwt: ~
        login:
            provider: app_user_provider
            pattern: ^/api/login
            stateless: true
            json_login:
                check_path: /api/login
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
        api:
            provider: jwt_user_provider
            pattern: ^/api
            stateless: true
            jwt: ~

        # main:
        #     lazy: true
        #     provider: users_in_memory

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/forgot_password, role: PUBLIC_ACCESS }
        - { path: ^/api/register$, roles: PUBLIC_ACCESS }
        - { path: ^/api/login$, roles: PUBLIC_ACCESS }
        - { path: ^/api/token/refresh$, roles: PUBLIC_ACCESS }
        - { path: ^/api$, roles: PUBLIC_ACCESS }
        - {
            path: ^/api/image,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/personne,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, GET, PUT, DELETE],
          }
        - {
            path: ^/api/jouet,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/mecanisme,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/theme,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/recompense,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/categorie,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/note,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/commentaire,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/video,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/evenement,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/blog,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, PUT, DELETE],
          }
        - {
            path: ^/api/invitation,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, GET, PUT, DELETE],
          }
        - {
            path: ^/api/pret,
            roles: IS_AUTHENTICATED_FULLY,
            methods: [POST, PATCH, GET, PUT, DELETE],
          }




when@test:
  security:
    password_hashers:
      # By default, password hashers are resource intensive and take time. This is
      # important to generate secure password hashes. In tests however, secure hashes
      # are not important, waste resources and increase test times. The following
      # reduces the work factor to the lowest possible values.
      Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
        algorithm: auto
        cost: 4 # Lowest possible value for bcrypt
        time_cost: 3 # Lowest possible value for argon
        memory_cost: 10 # Lowest possible value for argon
